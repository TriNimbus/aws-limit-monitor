{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "(SO0005) - AWS Limits Monitor - This templates creates and schedules Lambda functions to notify you of approaching limits",
  "Parameters": {
    "TopicEmail0": {
      "Default": "your.address@example.com",
      "Description": "E-Mail address to subscribe to alerts",
      "Type": "String"
    },
    "TopicEmail1": {
      "Default": "",
      "Description": "E-Mail address to subscribe to alerts",
      "Type": "String"
    },
    "TopicEmail2": {
      "Default": "",
      "Description": "E-Mail address to subscribe to alerts",
      "Type": "String"
    },
    "TopicEmail3": {
      "Default": "",
      "Description": "E-Mail address to subscribe to alerts",
      "Type": "String"
    },
    "TopicEmail4": {
      "Default": "",
      "Description": "E-Mail address to subscribe to alerts",
      "Type": "String"
    },
    "TopicEmail5": {
      "Default": "",
      "Description": "E-Mail address to subscribe to alerts",
      "Type": "String"
    },
    "TopicEmail6": {
      "Default": "",
      "Description": "E-Mail address to subscribe to alerts",
      "Type": "String"
    },
    "TopicEmail7": {
      "Default": "",
      "Description": "E-Mail address to subscribe to alerts",
      "Type": "String"
    },
    "TopicEmail8": {
      "Default": "",
      "Description": "E-Mail address to subscribe to alerts",
      "Type": "String"
    },
    "TopicEmail9": {
      "Default": "",
      "Description": "E-Mail address to subscribe to alerts",
      "Type": "String"
    },
    "AccountList": {
      "Default": "\"000000000000\",\"999999999999\"",
      "Description": "Quote Encapsulated, Comma Delimited List of Account Numbers to Scan for Limits",
      "Type": "String"
    },
    "SNSTopicName": {
      "Default": "LimitCheckSNS",
      "Description": "Name of the SNS Topic for E-Mail Alerts",
      "Type": "String"
    },
    "CheckRoleName": {
      "Default": "LimitCheckRole",
      "Description": "Name of IAM Role created to check limits",
      "Type": "String"
    },
    "SendAnonymousData": {
      "Description": "Send anonymous data to AWS",
      "Type": "String",
      "Default": "Yes",
      "AllowedValues": [
        "Yes",
        "No"
      ]
    },
    "S3LambdaBucket": {
      "Default": "solutions-us-east-1",
      "Description": "S3 Bucket where the lambda function is stored",
      "Type": "String"
    },
    "S3LambdaFunctionZip": {
      "Default": "limit-monitor/v2/limits.zip",
      "Description": "Location of the within the S3 bucket. It is expected that master and child functions are both found in the zip file",
      "Type": "String"
    },
    "SupportedRegions": {
      "Default": "us-east-1",
      "Description": "Comma-delimited list of regions (as string) in which the limits will be checked",
      "Type": "String"
    },
    "PagerDutyEndPoint": {
      "Description": "Integration URL for sending alerts to PagerDuty",
      "Type": "String"
    },
    "PagerDutySNSTopic": {
      "Default": "PDAlerts",
      "Description": "Alert topic associated specifically with PagerDuty",
      "Type": "String"
    },
    "CloudWatchMetricLimits": {
      "Default": "AWSUsageLimits",
      "Description": "Cloudwatch Namespace (and Metric) to which the retrieved limits are sent",
      "Type": "String"
    }
  },
  "Conditions": {
    "HasTopicEmail1": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            "",
            {
              "Ref": "TopicEmail1"
            }
          ]
        }
      ]
    },
    "HasTopicEmail2": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            "",
            {
              "Ref": "TopicEmail2"
            }
          ]
        }
      ]
    },
    "HasTopicEmail3": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            "",
            {
              "Ref": "TopicEmail3"
            }
          ]
        }
      ]
    },
    "HasTopicEmail4": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            "",
            {
              "Ref": "TopicEmail4"
            }
          ]
        }
      ]
    },
    "HasTopicEmail5": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            "",
            {
              "Ref": "TopicEmail5"
            }
          ]
        }
      ]
    },
    "HasTopicEmail6": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            "",
            {
              "Ref": "TopicEmail6"
            }
          ]
        }
      ]
    },
    "HasTopicEmail7": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            "",
            {
              "Ref": "TopicEmail7"
            }
          ]
        }
      ]
    },
    "HasTopicEmail8": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            "",
            {
              "Ref": "TopicEmail8"
            }
          ]
        }
      ]
    },
    "HasTopicEmail9": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            "",
            {
              "Ref": "TopicEmail9"
            }
          ]
        }
      ]
    }
  },
  "Resources": {
    "SNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "AWS Limits SNS",
        "Subscription": [
          {
            "Endpoint": {
              "Ref": "TopicEmail0"
            },
            "Protocol": "email"
          }
        ],
        "TopicName": {
          "Ref": "SNSTopicName"
        }
      },
      "Metadata": {
        "Comment": "Create an SNS Topic to which limits are published, subscribe e-mail parameter"
      }
    },
    "SNSTopicExtraSubscription1": {
      "Type": "AWS::SNS::Subscription",
      "Condition": "HasTopicEmail1",
      "Properties": {
        "Endpoint": {
          "Ref": "TopicEmail1"
        },
        "Protocol": "email",
        "TopicArn": {
          "Ref": "SNSTopic"
        }
      }
    },
    "SNSTopicExtraSubscription2": {
      "Type": "AWS::SNS::Subscription",
      "Condition": "HasTopicEmail2",
      "Properties": {
        "Endpoint": {
          "Ref": "TopicEmail2"
        },
        "Protocol": "email",
        "TopicArn": {
          "Ref": "SNSTopic"
        }
      }
    },
    "SNSTopicExtraSubscription3": {
      "Type": "AWS::SNS::Subscription",
      "Condition": "HasTopicEmail3",
      "Properties": {
        "Endpoint": {
          "Ref": "TopicEmail3"
        },
        "Protocol": "email",
        "TopicArn": {
          "Ref": "SNSTopic"
        }
      }
    },
    "SNSTopicExtraSubscription4": {
      "Type": "AWS::SNS::Subscription",
      "Condition": "HasTopicEmail4",
      "Properties": {
        "Endpoint": {
          "Ref": "TopicEmail4"
        },
        "Protocol": "email",
        "TopicArn": {
          "Ref": "SNSTopic"
        }
      }
    },
    "SNSTopicExtraSubscription5": {
      "Type": "AWS::SNS::Subscription",
      "Condition": "HasTopicEmail5",
      "Properties": {
        "Endpoint": {
          "Ref": "TopicEmail5"
        },
        "Protocol": "email",
        "TopicArn": {
          "Ref": "SNSTopic"
        }
      }
    },
    "SNSTopicExtraSubscription6": {
      "Type": "AWS::SNS::Subscription",
      "Condition": "HasTopicEmail6",
      "Properties": {
        "Endpoint": {
          "Ref": "TopicEmail6"
        },
        "Protocol": "email",
        "TopicArn": {
          "Ref": "SNSTopic"
        }
      }
    },
    "SNSTopicExtraSubscription7": {
      "Type": "AWS::SNS::Subscription",
      "Condition": "HasTopicEmail7",
      "Properties": {
        "Endpoint": {
          "Ref": "TopicEmail7"
        },
        "Protocol": "email",
        "TopicArn": {
          "Ref": "SNSTopic"
        }
      }
    },
    "SNSTopicExtraSubscription8": {
      "Type": "AWS::SNS::Subscription",
      "Condition": "HasTopicEmail8",
      "Properties": {
        "Endpoint": {
          "Ref": "TopicEmail8"
        },
        "Protocol": "email",
        "TopicArn": {
          "Ref": "SNSTopic"
        }
      }
    },
    "SNSTopicExtraSubscription9": {
      "Type": "AWS::SNS::Subscription",
      "Condition": "HasTopicEmail9",
      "Properties": {
        "Endpoint": {
          "Ref": "TopicEmail9"
        },
        "Protocol": "email",
        "TopicArn": {
          "Ref": "SNSTopic"
        }
      }
    },
    "SNSAlertTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "AWS Alert SNS",
        "Subscription": [
          {
            "Endpoint": {
              "Ref": "PagerDutyEndPoint"
            },
            "Protocol": "https"
          }
        ],
        "TopicName": {
          "Ref": "PagerDutySNSTopic"
        }
      },
      "Metadata": {
        "Comment": "Create an SNS Topic to which alerts are sent, subscribe PagerDuty https endpoint"
      }
    },
    "CloudWatchAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "AWSLimitsAlarm",
        "AlarmDescription": "Alarm to trigger PagerDuty",
        "AlarmActions": [
          {
            "Ref": "SNSAlertTopic"
          }
        ],
        "MetricName": {
          "Ref": "CloudWatchMetricLimits"
        },
        "Namespace": {
          "Ref": "CloudWatchMetricLimits"
        },
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": "1",
        "Period": "60",
        "Statistic": "Maximum",
        "Threshold": "10"
      }
    },
    "MasterLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Function which evaluates list of accounts passed by the CloudWatch Event and calls the Child Lambda to scan each account",
        "Code": {
          "S3Bucket": {
            "Ref": "S3LambdaBucket"
          },
          "S3Key": {
            "Ref": "S3LambdaFunctionZip"
          }
        },
        "Environment": {
          "Variables": {
            "regions": {
              "Ref": "SupportedRegions"
            }
          }
        },
        "Handler": "limit-master.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "MasterRole",
            "Arn"
          ]
        },
        "Runtime": "python2.7",
        "Timeout": "300"
      },
      "DependsOn": "MasterRole",
      "Metadata": {
        "Comment": "Function which evaluates list of accounts passed by the CloudWatch Event and calls the Child Lambda to scan each account"
      }
    },
    "ChildLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Function which assumes a role in each account to scan for approaching limits and sends an alert to the SNS topic",
        "Code": {
          "S3Bucket": {
            "Ref": "S3LambdaBucket"
          },
          "S3Key": {
            "Ref": "S3LambdaFunctionZip"
          }
        },
        "Environment": {
          "Variables": {
            "regions": {
              "Ref": "SupportedRegions"
            },
            "cloudwatch_metric": {
              "Ref": "CloudWatchMetricLimits"
            }
          }
        },
        "Handler": "limit-check.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "ChildRole",
            "Arn"
          ]
        },
        "Runtime": "python2.7",
        "Timeout": "300"
      },
      "DependsOn": "ChildRole",
      "Metadata": {
        "Comment": "Function which assumes a role in each account to scan for approaching limits and sends an alert to the SNS topic"
      }
    },
    "ConfigLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Custom Resource Lambda to create the cross-account role assumed by the Child Lambda",
        "Code": {
          "S3Bucket": {
            "Ref": "S3LambdaBucket"
          },
          "S3Key": {
            "Ref": "S3LambdaFunctionZip"
          }
        },
        "Handler": "configuration.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "ConfigRole",
            "Arn"
          ]
        },
        "Runtime": "python2.7",
        "Timeout": "300"
      },
      "DependsOn": "ConfigRole",
      "Metadata": {
        "Comment": "Custom Resource Lambda to create the cross-account role assumed by the Child Lambda"
      }
    },
    "CheckRole": {
      "Type": "Custom::CheckRole",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ConfigLambda",
            "Arn"
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "CheckRoleName": {
          "Ref": "CheckRoleName"
        },
        "AccountNumber": {
          "Ref": "AWS::AccountId"
        }
      },
      "Metadata": {
        "Comment": "Invoke the Configuration Lambda Function with the specified parameters for creating the role to assume"
      }
    },
    "ChildRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "Limits-AssumeRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": [
                    {
                      "Ref": "SNSTopic"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sts:AssumeRole"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:iam::*:role/",
                          {
                            "Ref": "CheckRoleName"
                          }
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeRegions"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:putMetricData"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      },
      "Metadata": {
        "Comment": "Invocation role for the Lambda functions to use"
      }
    },
    "MasterRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "Limits-AssumeRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:Invoke*"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ChildLambda",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      "Metadata": {
        "Comment": "Invocation role for the Lambda functions to use"
      }
    },
    "ConfigRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "Limits-AssumeRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:AttachRolePolicy",
                    "iam:DetachRolePolicy",
                    "iam:CreateRole",
                    "iam:DeleteRole",
                    "iam:PutRolePolicy",
                    "iam:DeleteRolePolicy"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:iam::",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":role/",
                          {
                            "Ref": "CheckRoleName"
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      "Metadata": {
        "Comment": "Invocation role for the Lambda functions to use"
      }
    },
    "Rule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(*/15 * * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "MasterLambda",
                "Arn"
              ]
            },
            "Id": "LimitsRule",
            "Input": {
              "Fn::Join": [
                "",
                [
                  "{\"CheckRoleName\":\"",
                  {
                    "Ref": "CheckRoleName"
                  },
                  "\",\"UUID\":\"",
                  {
                    "Fn::GetAtt": [
                      "CheckRole",
                      "UUID"
                    ]
                  },
                  "\",\"Region\":\"",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\",\"AccountList\":[",
                  {
                    "Ref": "AccountList"
                  },
                  "],\"ChildLambda\":\"",
                  {
                    "Ref": "ChildLambda"
                  },
                  "\",\"SNSArn\":\"",
                  {
                    "Ref": "SNSTopic"
                  },
                  "\",\"SendAnonymousData\":\"",
                  {
                    "Ref": "SendAnonymousData"
                  },
                  "\"}"
                ]
              ]
            }
          }
        ]
      },
      "DependsOn": "CheckRole"
    },
    "LambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "MasterLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "Rule",
            "Arn"
          ]
        }
      }
    }
  },
  "Outputs": {
    "CreateRole": {
      "Description": "Run this in each sub-account you wish to monitor to create a role for the primary account to assume",
      "Value": {
        "Fn::Join": [
          "",
          [
            "aws iam create-role --role-name ",
            {
              "Ref": "CheckRoleName"
            },
            " --assume-role-policy-document '{\"Version\": \"2012-10-17\",\"Statement\": [{\"Effect\": \"Allow\",\"Principal\": {\"AWS\": \"",
            {
              "Ref": "AWS::AccountId"
            },
            "\"},\"Action\": \"sts:AssumeRole\"}]}'"
          ]
        ]
      }
    },
    "AttachPolicy1": {
      "Description": "Add Read Only Access",
      "Value": {
        "Fn::Join": [
          "",
          [
            "aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/ReadOnlyAccess --role-name ",
            {
              "Ref": "CheckRoleName"
            }
          ]
        ]
      }
    },
    "AttachPolicy2": {
      "Description": "Add Support API for TrustedAdvisor access",
      "Value": {
        "Fn::Join": [
          "",
          [
            "aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AWSSupportAccess --role-name ",
            {
              "Ref": "CheckRoleName"
            }
          ]
        ]
      }
    },
    "AttachPolicy3": {
      "Description": "Add Support API for TrustedAdvisor access",
      "Value": {
        "Fn::Join": [
          "",
          [
            "aws iam put-role-policy --role-name ",
            {
              "Ref": "CheckRoleName"
            },
            " --policy-name CloudFormationDescribe --policy-document '{\"Version\": \"2012-10-17\",\"Statement\": [{\"Sid\": \"Stmt1455149881000\",\"Effect\": \"Allow\",\"Action\": [\"cloudformation:DescribeAccountLimits\", \"dynamodb:DescribeLimits\"],\"Resource\": [\"*\"]}]}'"
          ]
        ]
      }
    },
    "UUID": {
      "Description": "Newly created random UUID.",
      "Value": {
        "Fn::GetAtt": [
          "CheckRole",
          "UUID"
        ]
      }
    },
    "TestEventData": {
      "Description": "Copy and paste this JSON into the MasterLambda Test Event Data field in order to manually invoke the Limit Monitor Solution",
      "Value": {
        "Fn::Join": [
          "",
          [
            "{\"CheckRoleName\":\"",
            {
              "Ref": "CheckRoleName"
            },
            "\",\"UUID\":\"",
            {
              "Fn::GetAtt": [
                "CheckRole",
                "UUID"
              ]
            },
            "\",\"Region\":\"",
            {
              "Ref": "AWS::Region"
            },
            "\",\"AccountList\":[",
            {
              "Ref": "AccountList"
            },
            "],\"ChildLambda\":\"",
            {
              "Ref": "ChildLambda"
            },
            "\",\"SNSArn\":\"",
            {
              "Ref": "SNSTopic"
            },
            "\",\"SendAnonymousData\":\"",
            {
              "Ref": "SendAnonymousData"
            },
            "\"}"
          ]
        ]
      }
    }
  }
}
